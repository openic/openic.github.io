// Generated by CoffeeScript 1.3.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.AnalyticsCollector = (function() {

    AnalyticsCollector.name = 'AnalyticsCollector';

    function AnalyticsCollector() {
      this.end_session = __bind(this.end_session, this);

      this.still_here = __bind(this.still_here, this);

      this.window_inactive = __bind(this.window_inactive, this);

      this.window_active = __bind(this.window_active, this);

      this.windowVisibilityChanged = __bind(this.windowVisibilityChanged, this);

      var one_minute;
      this.one_second = 1000;
      one_minute = 60 * this.one_second;
      this.max_session_inactivity = 15 * one_minute;
      this.viewing_timeout_delay = one_minute;
      this.error_count = 0;
      this.session_is_open = false;
      this.collection_domains = {
        production: 'analytics.populr.me',
        staging: 'stg-populr-analytics-collector.heroku.com',
        development: 'dev-populr-analytics-collector.heroku.com',
        test: 'analytics.populr.me'
      };
    }

    AnalyticsCollector.prototype.setupWindowActiveCallback = function() {
      this.hidden = 'hidden';
      if (Object.prototype.hasOwnProperty.call(document, this.hidden)) {
        return document.addEventListener('visibilitychange', this.windowVisibilityChanged);
      } else if (Object.prototype.hasOwnProperty.call(document, this.hidden = 'mozHidden')) {
        return document.addEventListener('mozvisibilitychange', this.windowVisibilityChanged);
      } else if (Object.prototype.hasOwnProperty.call(document, this.hidden = 'webkitHidden')) {
        return document.addEventListener('webkitvisibilitychange', this.windowVisibilityChanged);
      } else if (Object.prototype.hasOwnProperty.call(document, this.hidden = 'msHidden')) {
        return document.addEventListener('msvisibilitychange', this.windowVisibilityChanged);
      } else if (Object.prototype.hasOwnProperty.call(document, 'onfocusin')) {
        document.onfocusin = this.window_active;
        return document.onfocusout = this.window_inactive;
      } else {
        $(window).focus(this.window_active);
        return $(window).blur(this.window_inactive);
      }
    };

    AnalyticsCollector.prototype.windowVisibilityChanged = function(evt) {
      var evtMap;
      evtMap = {
        focus: this.window_active,
        focusin: this.window_active,
        pageshow: this.window_active,
        blur: this.window_inactive,
        focusout: this.window_inactive,
        pagehide: this.window_inactive
      };
      evt || (evt = window.event);
      if (evtMap.hasOwnProperty(evt.type)) {
        return evtMap[evt.type].call(this);
      } else if (document[this.hidden]) {
        return this.window_inactive();
      } else {
        return this.window_active();
      }
    };

    AnalyticsCollector.prototype.window_active = function() {
      if (this.is_active) {
        return;
      }
      console.log('active');
      this.set_viewing_timeout(10 * this.one_second);
      return this.is_active = true;
    };

    AnalyticsCollector.prototype.window_inactive = function() {
      if (!this.is_active) {
        return;
      }
      console.log('inactive');
      this.clear_viewing_timeout();
      return this.is_active = false;
    };

    AnalyticsCollector.prototype.attach = function() {
      if (window.location.search.indexOf('?sa=1') === 0) {
        return;
      }
      this.tracker_image = $('#pop_analytic');
      this.tracker_image.error(this.error);
      this.setupWindowActiveCallback();
      this.window_active();
      this.open();
      return this.set_viewing_timeout(45 * this.one_second);
    };

    AnalyticsCollector.prototype.open = function() {
      this.session_id = this.new_session_id();
      this.session_is_open = true;
      return this.log('open');
    };

    AnalyticsCollector.prototype.log = function(event, label, url) {
      var base_url, cache_buster, callback, compound_id, date, tracer_id, zone,
        _this = this;
      if (label == null) {
        label = '';
      }
      if (url == null) {
        url = '';
      }
      if (!this.is_active && event === 'viewing') {

      } else if (!this.session_is_open && event !== 'open') {
        this.open();
        callback = function() {
          return _this.log(event, label, url);
        };
        return window.setTimeout(callback, this.one_second * 5);
      } else if (this.error_count < 3) {
        if (event !== 'viewing') {
          this.set_session_timeout();
        }
        this.set_viewing_timeout();
        this.window_active();
        compound_id = window.pop_id;
        if (window.location.search.length) {
          tracer_id = window.location.search.replace('?', '').split('&')[0];
          if (!(tracer_id.indexOf('=') > -1)) {
            compound_id += "-" + tracer_id;
          }
        }
        base_url = "//" + this.collection_domains[window.environment] + "/pop?id=" + compound_id + "&sid=" + this.session_id;
        date = new Date();
        cache_buster = date.getTime();
        switch (event) {
          case 'viewing':
            return this.tracker_image.attr('src', "" + base_url + "&event=viewing&c=" + cache_buster);
          case 'open':
            zone = -1 * date.getTimezoneOffset();
            return this.tracker_image.attr('src', "" + base_url + "&event=open&zone=" + zone + "&c=" + cache_buster);
          default:
            return this.tracker_image.attr('src', "" + base_url + "&event=" + event + "&label=" + (encodeURIComponent(label)) + "&url=" + (encodeURIComponent(url)) + "&c=" + cache_buster);
        }
      }
    };

    AnalyticsCollector.prototype.error = function() {
      return this.error_count++;
    };

    AnalyticsCollector.prototype.still_here = function() {
      return this.log('viewing');
    };

    AnalyticsCollector.prototype.set_viewing_timeout = function(delay) {
      if (delay == null) {
        delay = this.viewing_timeout_delay;
      }
      this.clear_viewing_timeout();
      return this.viewing_timeout_id = window.setTimeout(this.still_here, delay);
    };

    AnalyticsCollector.prototype.clear_viewing_timeout = function() {
      if (this.viewing_timeout_id) {
        return window.clearTimeout(this.viewing_timeout_id);
      }
    };

    AnalyticsCollector.prototype.end_session = function() {
      this.clear_viewing_timeout();
      return this.session_is_open = false;
    };

    AnalyticsCollector.prototype.set_session_timeout = function() {
      this.clear_session_timeout();
      return this.session_timeout_id = window.setTimeout(this.end_session, this.max_session_inactivity);
    };

    AnalyticsCollector.prototype.clear_session_timeout = function() {
      if (this.session_timeout_id) {
        return window.clearTimeout(this.session_timeout_id);
      }
    };

    AnalyticsCollector.prototype.new_session_id = function() {
      var chars, num, s, _i;
      chars = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
      s = '';
      for (num = _i = 0; _i <= 5; num = ++_i) {
        s += chars[Math.random() * 62 | 0];
      }
      return String(Math.round(new Date() / 1000)) + s;
    };

    return AnalyticsCollector;

  })();

}).call(this);
